@startuml
title Main Structure of FitTrack.loopCommandExecution()\n

participant ":FitTrack" as main
participant "ui: Ui" as ui
participant ":CommandParser" as parser
participant "command: XXXCommand" as cmd

main -> main ++: loopCommandExecution()

group do-while [!ExitCommand.isExit(command)]
    main -> ui ++: ui.scanCommandLine()
    note left: Get user input from UI
    return userCommandLine: String

    create parser
    main -> parser ++: new
    return : CommandParser


    main -> parser ++: .parseCommand(userCommandLine: String)
    note left: Parse user input
    note right: All exceptions during parsing are omitted

    parser -> parser ++: getBlankCommand(word: String, ...)
    note left: Create Command instance\n with no data
    create cmd
    parser -> cmd ++: new
    return command: XXXCommand
    return command: Command

    parser -> cmd ++: setArguments(args: String, ...)
    note left: Fill Command Instance \n with arguments
    return

    return command: Command
    destroy parser


    main -> cmd ++: command.setData(...)
    note left: Provide data to command
    return

    main -> cmd ++: command.execute()
    note left: Execute command
    note right: Manipulate the data provided\n and create result
    return: commandResult: CommandResult

    main -> ui ++: ui.printCR(commandResult: CR)
    note left: Print the result of execution
    note right: CR for CommandResult
    return

    destroy cmd
end


@enduml